<?php
declare(strict_types=1);
namespace App\Controller;

use App\Entity\Sensor;
use App\Event\SensorUpdateEvent;
use App\Form\SensorType;
use App\Util\MosquittoWrapper\MosquittoPublisher;
use App\Util\TopicGenerator\TopicGenerator;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;
use Symfony\Component\HttpFoundation\Request;

class SensorController extends GenericController
{
    protected $entityClass = Sensor::class;

    protected $formType = SensorType::class;

    /**
     * @Route("/sensor", name="sensor")
     */
    public function indexAction(Request $request)
    {
        return parent::indexAction($request); // TODO: Change the autogenerated stub
    }

    /**
     * @Route("/sensor/add", name="sensor_add")
     */
    public function addAction(Request $request)
    {
        return parent::addAction($request); // TODO: Change the autogenerated stub
    }

    /**
     * @Route("/sensor/edit/{id}",
     *     name="sensor_edit",
     *     requirements={
     *     "id": "\d+"
     * })
     */
    public function editAction(Request $request, $id)
    {
        return parent::editAction($request, $id); // TODO: Change the autogenerated stub
    }

    /**
     * @Route("/sensor/delete/{id}",
     *     name="sensor_delete",
     *     requirements={
     *     "id": "\d+"
     * })
     */
    public function deleteAction(Request $request, $id)
    {
        return parent::deleteAction($request, $id); // TODO: Change the autogenerated stub
    }

    /**
     * @Route(
     *     "/sensor/{uuid}/status/set/{status}",
     *     name="sensor_set_status",
     *     options={
     *     "expose"=true
     *     },
     *     requirements={
     *     "status": "\d+"
     * }
     * )
     *
     * @param MosquittoPublisher       $mosquittoPublisher
     * @param EventDispatcherInterface $dispatcher
     * @param TopicGenerator           $topicGenerator
     * @param                          $uuid
     * @param                          $status
     *
     * @return \Symfony\Component\HttpFoundation\RedirectResponse
     */
    public function setStatusAction(
        MosquittoPublisher $mosquittoPublisher,
        EventDispatcherInterface $dispatcher,
        TopicGenerator $topicGenerator,
        $uuid,
        $status
    ) {
        $topic = $topicGenerator->generate($uuid, ['status', 'set']);

        $mosquittoPublisher->publish($topic, $status);

        $event = new SensorUpdateEvent($uuid, $status);
        $dispatcher->dispatch(SensorUpdateEvent::NAME, $event);

        return $this->redirectToRoute('sensor');
    }

    /**
     * @Route(
     *     "/sensor/{uuid}/status/check",
     *     name="sensor_check_single_status",
     *     options={
     *     "expose"=true
     *     }
     * )
     *
     * @param MosquittoPublisher       $mosquittoPublisher
     * @param EventDispatcherInterface $dispatcher
     * @param TopicGenerator           $topicGenerator
     * @param                          $uuid
     *
     * @return \Symfony\Component\HttpFoundation\RedirectResponse
     */
    public function checkSingleStatusAction(
        MosquittoPublisher $mosquittoPublisher,
        TopicGenerator $topicGenerator,
        $uuid
    ) {
        $checkStatusTopic = $topicGenerator->generate($uuid, ['status', 'check']);

        $mosquittoPublisher->publish($checkStatusTopic);

        return $this->redirectToRoute('sensor');
    }

    /**
     * @Route(
     *     "/sensor/all/status/check",
     *     name="sensor_check_all_status",
     *     options={
     *     "expose"=true
     *     }
     * )
     *
     * @param MosquittoPublisher       $mosquittoPublisher
     * @param TopicGenerator           $topicGenerator
     *
     * @return \Symfony\Component\HttpFoundation\RedirectResponse
     */
    public function refreshStatusAction(
        MosquittoPublisher $mosquittoPublisher,
        TopicGenerator $topicGenerator
    ) {
        $checkStatusTopic = $topicGenerator->generate('all', ['status', 'check']);

        $mosquittoPublisher->publish($checkStatusTopic);

        return $this->redirectToRoute('sensor');
    }
}
