# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Event}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    gelf.publisher:
        class: Gelf\MessagePublisher
        arguments:
            - '%env(GRAYLOG_HOST)%'
            - '%env(GRAYLOG_PORT)%'

    monolog.gelf_handler:
        class: Monolog\Handler\GelfHandler
        arguments:
            - "@gelf.publisher"

    App\Util\MosquittoWrapper\Handler\MosquittoHandler:
        arguments:
            - '%env(MOSQUITTO_BROKER_HOST)%'

    App\Util\MonitoringService\StatsManager:
        arguments:
            - "@statsd"

    App\Listener\SensorFoundListener:
        tags:
            - { name: kernel.event_listener, event: sensor.found }

    App\Listener\SensorAddListener:
        tags:
            - { name: kernel.event_listener, event: sensor.add }

    App\Listener\SensorUpdateListener:
        tags:
            - { name: kernel.event_listener, event: sensor.update }
        arguments:
            - "@snc_redis.sensor_api"

    App\Listener\SensorDeleteListener:
        tags:
            - { name: doctrine.event_listener, event: preRemove }

    App\Listener\SensorDisconnectListener:
        tags:
            - { name: kernel.event_listener, event: sensor.disconnect }

    App\Listener\SensorConnectListener:
        tags:
            - { name: kernel.event_listener, event: sensor.connect }

    App\Listener\JobStartListener:
        tags:
            - { name: kernel.event_listener, event: job.start }

    App\Listener\JobStopListener:
        tags:
            - { name: kernel.event_listener, event: job.stop }

    App\Listener\JobInterruptListener:
        tags:
            - { name: kernel.event_listener, event: job.interrupt }

    App\Listener\JobRunningListener:
        tags:
            - { name: kernel.event_listener, event: job.running }

    App\Listener\JobCheckListener:
        tags:
            - { name: kernel.event_listener, event: job.check }

    App\Listener\JobUpdateListener:
        tags:
            - { name: kernel.event_listener, event: job.update }

    App\Util\ManualBehavior\ManualBehaviorManager:
        tags:
            - { name: kernel.event_listener, event: sensor.check, method: checkSensor }

    App\Util\ScheduledBehavior\ScheduledBehaviorManager:
        tags:
            - { name: kernel.event_listener, event: scheduled_task.execute, method: execute }